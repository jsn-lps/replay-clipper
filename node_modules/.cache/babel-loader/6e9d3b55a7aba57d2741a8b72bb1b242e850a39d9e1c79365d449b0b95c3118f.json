{"ast":null,"code":"var _jsxFileName = \"F:\\\\coding\\\\replay-clipper\\\\src\\\\App.js\";\nimport './App.css';\nimport React, { useState } from 'react';\nimport OBSWebSocket from 'obs-websocket-js';\nimport request from 'postman-request';\nimport dotenv from 'dotenv';\n// import { tokenURL, clipsURL } from '../config/twitch-api-config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(ReplayClipper, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\n\n// // async function generateOauth(url, clientID, clientSecret, callback) {\n\n// //   const options = {\n// //       uri: url,\n// //       json: true,\n// //       body:{\n// //           client_id: clientID,\n// //           client_secret: clientSecret,\n// //           grant_type: 'client_credentials'\n// //       }\n// //   };\n// //   request.post(options, (err, res, body) => {\n// //       if(err) {\n// //               return console.log(err);\n// //           }\n// //           console.log(\"OAUTH QUERIED SUCCESSFULLY\")\n// //       callback(res);\n// //       }\n// //       )\n// // };\n\n// // let obsWebSocket = {\n// //   accessToken: 'banana',\n// //   obsWebSocketIP: \"192.168.1.228\",\n// //   obsWebSocketPort: \"4455\",\n// //   tokenURL: tokenURL,\n// //   clipsURL: clipsURL,\n// //   clientID: process.env.CLIENT_ID,\n// //   clientSecret: process.env.CLIENT_SECRET\n\n// // }\n// // const obs = new OBSWebSocket();\n// // obs.on('ConnectionOpened', async() => {\n// //     console.log(\"DOGGIES\")\n// //     obsWebSocket.accessToken = await generateOauth(obsWebSocket.tokenURL, obsWebSocket.clientID, obsWebSocket.clientSecret, (res) => {\n// //         // set global variable to accessToken (probably shouldn't do this...)\n// //         obsWebSocket.accessToken = res.body.access_token\n// //     });\n// // })\n\n// // TESTING \n// function ReplayClipper(props) {\n//   return <body class=\"PageWrapper\"><MainWindow/></body>;\n// }\n\n// function MainWindow(props) {\n\n//   var accessToken = {\n//     accessToken: ''\n//   }\n\n//   let obsWebSocket = {\n//     accessToken: 'banana',\n//     obsWebSocketIP: \"192.168.1.228\",\n//     obsWebSocketPort: \"4455\",\n\n//   }\n\n//   return <body class=\"BodyContainer\" >\n//     <Navigation obsWebSocket={obsWebSocket}/>\n//     <HubTab/>\n\n//     </body>;\n// }\n\n// // change to grid\n// function Navigation(props) {\n//   return <div>\n//     <ul class=\"NavBar\">\n//       <li class='NavElement'>Hub</li>\n//       <li class='NavElement'>Clips</li>\n\n//     </ul>\n//   </div>\n// }\n\n// function HubTab(props) {\n\n//   const [checked, setChecked] = useState(false);\n\n//   // add function to change replay buffer to enabled / disabled\n//   function handleReplayBufferToggleChange(event) {\n//     setChecked(event.target.checked);\n//     if (event.target.checked) {\n//       console.log(\"enabled\")\n//     } else {\n//       console.log(\"disabled\")\n//     }\n\n//     }\n\n//     return <div class=\"ContentWindow\">\n//       <div class='leftContent'>\n//       BANANA\n//       </div>\n\n//       <div class='rightContent'>\n\n//       {/*  replay buffer status window */}\n//         <div class=\"replayBufferStatus\">Replay Buffer Status:\n//         <label class=\"switch\">\n//           <input name=\"toggleReplayBuffer\" type=\"checkbox\" checked={checked} onChange={handleReplayBufferToggleChange}/>\n//             <span class=\"button\"></span>\n//           </label>\n//           </div>\n\n//         <div></div>\n//       </div>\n//     </div>\n\n// }\n\n// // for passing websocket information\n// // {obsWebSocket: {accessToken, obsWebSocketIP, obsWebSocketPort}}\n\n// function ReplayBufferToggle (props) {\n\n//   // function handleReplayBufferToggleChange(event) {\n//   //   setChecked(event.target.checked);\n//   //     if (event.target.checked) {\n//   //       console.log(\"enabled\")\n//   //     } else {\n//   //       console.log(\"disabled\")\n//   //     }\n//   //   }  \n\n//     // const toggleReplayBuffer = async() => {\n//     //   let toggleReplayBufferData\n//     //     try {\n//     //       toggleReplayBufferData = await obs.call('ToggleReplayBuffer');\n//     //       console.log(toggleReplayBufferData)\n//     //   } catch(error) {\n//     //       console.error(`ERROR: ${error.code} ${error.message}`)\n//     //     }\n//     //   }\n\n//   return <div>\n\n//   </div>\n// }\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","OBSWebSocket","request","dotenv","jsxDEV","_jsxDEV","App","className","children","ReplayClipper","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["F:/coding/replay-clipper/src/App.js"],"sourcesContent":["import './App.css';\nimport React, { useState } from 'react';\nimport OBSWebSocket from 'obs-websocket-js';\nimport request from 'postman-request';\nimport dotenv from 'dotenv'\n// import { tokenURL, clipsURL } from '../config/twitch-api-config';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        \n        <ReplayClipper />\n\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n// // async function generateOauth(url, clientID, clientSecret, callback) {\n\n// //   const options = {\n// //       uri: url,\n// //       json: true,\n// //       body:{\n// //           client_id: clientID,\n// //           client_secret: clientSecret,\n// //           grant_type: 'client_credentials'\n// //       }\n// //   };\n// //   request.post(options, (err, res, body) => {\n// //       if(err) {\n// //               return console.log(err);\n// //           }\n// //           console.log(\"OAUTH QUERIED SUCCESSFULLY\")\n// //       callback(res);\n// //       }\n// //       )\n// // };\n\n\n\n// // let obsWebSocket = {\n// //   accessToken: 'banana',\n// //   obsWebSocketIP: \"192.168.1.228\",\n// //   obsWebSocketPort: \"4455\",\n// //   tokenURL: tokenURL,\n// //   clipsURL: clipsURL,\n// //   clientID: process.env.CLIENT_ID,\n// //   clientSecret: process.env.CLIENT_SECRET\n\n// // }\n// // const obs = new OBSWebSocket();\n// // obs.on('ConnectionOpened', async() => {\n// //     console.log(\"DOGGIES\")\n// //     obsWebSocket.accessToken = await generateOauth(obsWebSocket.tokenURL, obsWebSocket.clientID, obsWebSocket.clientSecret, (res) => {\n// //         // set global variable to accessToken (probably shouldn't do this...)\n// //         obsWebSocket.accessToken = res.body.access_token\n// //     });\n// // })\n\n\n// // TESTING \n// function ReplayClipper(props) {\n//   return <body class=\"PageWrapper\"><MainWindow/></body>;\n// }\n\n// function MainWindow(props) {\n\n//   var accessToken = {\n//     accessToken: ''\n//   }\n\n//   let obsWebSocket = {\n//     accessToken: 'banana',\n//     obsWebSocketIP: \"192.168.1.228\",\n//     obsWebSocketPort: \"4455\",\n\n\n//   }\n\n\n\n\n\n//   return <body class=\"BodyContainer\" >\n//     <Navigation obsWebSocket={obsWebSocket}/>\n//     <HubTab/>\n    \n//     </body>;\n// }\n\n\n// // change to grid\n// function Navigation(props) {\n//   return <div>\n//     <ul class=\"NavBar\">\n//       <li class='NavElement'>Hub</li>\n//       <li class='NavElement'>Clips</li>\n\n//     </ul>\n//   </div>\n// }\n\n\n\n\n\n// function HubTab(props) {\n\n//   const [checked, setChecked] = useState(false);\n\n//   // add function to change replay buffer to enabled / disabled\n//   function handleReplayBufferToggleChange(event) {\n//     setChecked(event.target.checked);\n//     if (event.target.checked) {\n//       console.log(\"enabled\")\n//     } else {\n//       console.log(\"disabled\")\n//     }\n    \n//     }\n\n//     return <div class=\"ContentWindow\">\n//       <div class='leftContent'>\n//       BANANA\n//       </div>\n\n\n//       <div class='rightContent'>\n\n//       {/*  replay buffer status window */}\n//         <div class=\"replayBufferStatus\">Replay Buffer Status:\n//         <label class=\"switch\">\n//           <input name=\"toggleReplayBuffer\" type=\"checkbox\" checked={checked} onChange={handleReplayBufferToggleChange}/>\n//             <span class=\"button\"></span>\n//           </label>\n//           </div>\n\n//         <div></div>\n//       </div>\n//     </div>\n\n// }\n\n\n// // for passing websocket information\n// // {obsWebSocket: {accessToken, obsWebSocketIP, obsWebSocketPort}}\n\n// function ReplayBufferToggle (props) {\n\n\n\n//   // function handleReplayBufferToggleChange(event) {\n//   //   setChecked(event.target.checked);\n//   //     if (event.target.checked) {\n//   //       console.log(\"enabled\")\n//   //     } else {\n//   //       console.log(\"disabled\")\n//   //     }\n//   //   }  \n\n//     // const toggleReplayBuffer = async() => {\n//     //   let toggleReplayBufferData\n//     //     try {\n//     //       toggleReplayBufferData = await obs.call('ToggleReplayBuffer');\n//     //       console.log(toggleReplayBufferData)\n//     //   } catch(error) {\n//     //       console.error(`ERROR: ${error.code} ${error.message}`)\n//     //     }\n//     //   }\n\n//   return <div>\n\n//   </div>\n// }"],"mappings":";AAAA,OAAO,WAAW;AAClB,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,YAAY,MAAM,kBAAkB;AAC3C,OAAOC,OAAO,MAAM,iBAAiB;AACrC,OAAOC,MAAM,MAAM,QAAQ;AAC3B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,SAASC,GAAGA,CAAA,EAAG;EACb,oBACED,OAAA;IAAKE,SAAS,EAAC,KAAK;IAAAC,QAAA,eAClBH,OAAA;MAAQE,SAAS,EAAC,YAAY;MAAAC,QAAA,eAE5BH,OAAA,CAACI,aAAa;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAG;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAGV;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACL;AAEV;AAACC,EAAA,GAXQR,GAAG;AAaZ,eAAeA,GAAG;;AAIlB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;;AAMA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAMA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AAAA,IAAAQ,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}